AWSTemplateFormatVersion: 2010-09-09
Description: Nenufar Kinesis Firehose Cloudformation v1

Parameters:
  SourceBucket:
    Type: String
    Description: S3 bucket with source
  SourceKey:
    Type: String
    Description: S3 key with Lambda source code
  SourceVersion:
    Type: String
    Description: S3 version for source code
  DeliveryStreamName:
    Type: String
    Description: Name for Kinesis Data Firehose Delivery Stream

Resources:
#-------------------------------------------------------------------------------
# LAMBDA RESOURCES
#-------------------------------------------------------------------------------
  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
            - Effect: Allow
              Principal:
                  Service:
                    - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        #S3Bucket: !Ref SourceBucket
        #S3Key: !Ref SourceKey
        #S3ObjectVersion: !Ref SourceVersion
        # https://github.com/amazon-archives/serverless-app-examples/tree/master/javascript/kinesis-firehose-process-record
        ZipFile: |
          exports.handler = (event, context, callback) => {
            /* Process the list of records and transform them */
            const output = event.records.map((record) => {
              const plaintextData = Buffer.from(record.data, 'base64').toString('ascii');
              console.log(plaintextData);
              return {
                recordId: record.recordId,
                result: 'Ok',
                data: record.data,
              };
            });
            console.log(`Processing completed.  Successful records ${output.length}.`);
            callback(null, { records: output });
          };
      Description: !Sub "Data transformation Lambda for ${DeliveryStreamName}"
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaIamRole.Arn
      Runtime: nodejs12.x # TODO use node 14 if using S3 source; not possible with ZipFile property
      Timeout: 60

  LambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
      RetentionInDays: 7

  LambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: events.amazonaws.com

#-------------------------------------------------------------------------------
# KINESIS RESOURCES
#-------------------------------------------------------------------------------
  FirehoseBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldData
            Status: Enabled
            ExpirationInDays: '14'

  Firehose:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties: 
      DeliveryStreamName: !Ref DeliveryStreamName
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        BucketARN: !GetAtt FirehoseBucket.Arn
        BufferingHints:
          IntervalInSeconds: '60'
          SizeInMBs: '50'
        CompressionFormat: UNCOMPRESSED
        Prefix: firehose/
        RoleARN: !GetAtt DeliveryRole.Arn
        ProcessingConfiguration:
          Enabled: 'true'
          Processors:
            - Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt LambdaFunction.Arn
              Type: Lambda
        S3BackupMode: Enabled
        S3BackupConfiguration:
          BucketARN: !GetAtt FirehoseBucket.Arn
          BufferingHints:
            IntervalInSeconds: '60'
            SizeInMBs: '50'
          CompressionFormat: UNCOMPRESSED
          RoleARN: !GetAtt DeliveryRole.Arn

  # NOTE This is not currently used but would be if logging options
  # were enabled for the firehose
  FirehoseLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/kinesisfirehose/${Firehose}"
      RetentionInDays: 7

  DeliveryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'
  DeliveryPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: firehose-delivery-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !Sub "arn:aws:s3:::${FirehoseBucket}"
              - !Sub "arn:aws:s3:::${FirehoseBucket}*"
          - Effect: Allow
            Action:
              - 'kinesis:DescribeStream'
              - 'kinesis:GetShardIterator'
              - 'kinesis:GetRecords'
            Resource: !GetAtt Firehose.Arn
          - Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
              - 'lambda:GetFunctionConfiguration'
            Resource:
              - !Sub "${LambdaFunction.Arn}*"
      Roles:
        - !Ref DeliveryRole